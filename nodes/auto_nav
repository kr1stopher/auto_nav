#! /usr/bin/env python

import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from math import atan
from math import ceil



#set Max linear and angular velocities based on turtlebot model
if (rospy.get_param('MODEL', 'waffle')== 'waffle'):
    linMax = .26
    angMax =1.8
    width = .306
if (rospy.get_param('model', 'waffle')== 'burger'):
    linMax = .22
    angMax = 1.8
    width = .178

#linear and angular velocity increment step size
linInc = .01
angInc = .1
dangerDistance = .8
extremeDangerDistance = .4

mode = 0 #initialize mode to 0 (full speed ahead, no obstacle)

#range of obstable in front of turtlebot must be avoided (up to .7m away from turtlebot, based on width)
theta = 2*atan(width/(2*dangerDistance))
thetaExtreme = 2*atan(width/(2*extremeDangerDistance))
#angle for turtlebot3 sensor to see if there is an obstacle less than danger distance ahead up to width of bot
#centered around pi/2
sensorStep = 0.017501922324299812 #laser sensor step size
# dangerZone = [180 - ceil(theta/(2*sensorStep)), 180 + ceil(theta/(2*sensorStep))]  #range of indexes to check LaserScan for ojbects <dangerDistance
dangerZone = [-ceil(theta/(2*sensorStep)), ceil(theta/(2*sensorStep))]  #range of indexes to check LaserScan for ojbects <dangerDistance
#range where turtlebot must stop forward motion and only turn in order to aavoid obstable
extremeDangerZone = [-ceil(thetaExtreme/(2*sensorStep)), ceil(thetaExtreme/(2*sensorStep))]

msg1 = 'Turtlebot3 will now assume automated navigation'

#takes /scan Message as input, makes decision on if the bot should turn right or left
def right_or_left(msg):
    scanZone = [ceil(theta/(2*sensorStep)), 2*ceil(theta/(2*sensorStep))]  #positive range of i's to test determining right or left
    print(scanZone[0], scanZone[1], 'youre in the zone')
    result = []
    i = scanZone[0]
    print('IM INSIDE THE RIGHT OR LEFT FUNTION')
    while (i<scanZone[1]):
        print(i, 'To the left ', msg.ranges[i], type(msg.ranges[i]), msg.ranges[i]==float('inf'))
        print(-i, 'To the right ', msg.ranges[-i], type(msg.ranges[-i]), msg.ranges[-i]==float('inf'))
        if msg.ranges[i] == float('inf'):
            print('the type is as follows', type(msg.ranages[i]), 'and the value is ', msg.ranges[i])
            i1 = 5
        else:
            i1 = msg.ranges[i]
        if msg.ranges[-i]==float('inf'):
            print('the type is as follows', type(msg.ranges[i]), 'and the value is ', msg.ranges[i])
            i2 = 5
        else:
            i2 = msg.ranges[-i]
        if (i1 == float('inf') or i2 == float('inf')):
            print('You done fucked up son')
        result.append(i1 - i2)
        i=i+1
    average = sum(result)/len(result)   #check to see if the left or right looks more clear
    print('THE VALUE OF THE AVERAGE IS ', average)
    #print('mode ', mode)
    if average > 0:
        return 'left'
    elif average < 0:
        return 'right'

#checks LaserScan input to determine if their is an obstable to be avoided and how close the obstable is
#returns 0 if no danger, 1 in danger zone, 2 for extreme danger
def isObstacle(msg):
    global mode, dangerZone, extremeDangerZone
    j = extremeDangerZone[0]
    dangerDetected = False #keeps track if any obstacle was found
    while (j<extremeDangerZone[1]):
        if (msg.ranges[j]<extremeDangerDistance):
            print('extremeDanger')
            if right_or_left(msg) == 'left':
                mode = 2
            else:
                mode = 2.5
            dangerDetected = True
        elif (msg.ranges[j]<dangerDistance and j>dangerZone[0] and j<dangerZone[1]):
            print('Moderate Danger')
            #check to see if left side or right side is more clear
                   #right -> mode =1.5 turn right
            if right_or_left(msg)=='left':
                mode = 1
            else:
                mode = 1.5
            dangerDetected = True
        j=j+1
    if not dangerDetected:
        mode = 0
    print('mode', mode)
    print(dangerDetected)



#slowly turn while moving forward to avoid objects in danger zone
def redirectRight():
    newTwist  = Twist()
    newTwist.linear.x = linMax*.7; newTwist.linear.y = 0; newTwist.linear.z = 0
    newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z = - angMax*.25
    return newTwist

def redirect():
    newTwist  = Twist()
    newTwist.linear.x = linMax*.7; newTwist.linear.y = 0; newTwist.linear.z = 0
    newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z = angMax*.25
    return newTwist

#Stop turtlebot and rotate to avoid objects in extreme danger zone
def extremeDanger():
    newTwist  = Twist()
    newTwist.linear.x = 0; newTwist.linear.y = 0; newTwist.linear.z = 0
    newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z = angMax*.4
    return newTwist


#Stop turtlebot and rotate to avoid objects in extreme danger zone
def extremeDangerRight():
    newTwist  = Twist()
    newTwist.linear.x = 0; newTwist.linear.y = 0; newTwist.linear.z = 0
    newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z = -angMax*.4
    return newTwist

#when no obstacles, full speed ahead no angular velocity
def noObstacle():
    newTwist  = Twist()
    newTwist.linear.x = linMax; newTwist.linear.y = 0; newTwist.linear.z = 0
    newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z = 0    #newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z = 0     newTwist.angular.x = 0; newTwist.angular.y = 0; newTwist.angular.z = 0
    return newTwist






if __name__=="__main__":
    rospy.init_node('auto_nav')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size = 10)
    #sub = rospy.Subscriber('/scan', LaserScan, isObstacle)
    #isObstacle(sub)
    #initialize publishers and subscribers
    twist = Twist()
    #twist & scan variables
    #print(msg01)

    # while(not rospy.is_shutdown()):
    i=0
    #while(not rospy.is_shutdown()):
    r = rospy.Rate(10)
    while(1):
    #while(i<10):
        # sub = rospy.Subscriber('/scan', LaserScan, isObstacle)
        mode = 1.5
        print('here is the number of times the loop has been executed', i)
        print('mode: ', mode)
        #input scan
        # mode = isObstacle() #check for obstacle
        # mode =2
        if mode == 0:
            #print('twist = noObstacle')
            twist = noObstacle()
        elif mode == 1:
            twist = redirect()
        elif mode == 1.5:
            twist = redirectRight()
        elif mode == 2:
            #print('twist = extremeDanger')
            twist = extremeDanger()
        """
        elif mode == 2.5:
            twist = extremeDangerRight()
        """
        #noObstacle, redirect, or extremeDanger accordingly
        #publish to cmd_vel
        pub.publish(twist)
        #print(sub)
        i=i+1
        r.sleep()
